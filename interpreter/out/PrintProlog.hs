{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintProlog where

-- pretty-printer generated by the BNF converter

import AbsProlog
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Name where
  prt _ (Name i) = doc (showString ( i))


instance Print Variable where
  prt _ (Variable i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Program1 sentences -> prPrec i 0 (concatD [prt 0 sentences])

instance Print Sentence where
  prt i e = case e of
    SentenceClause clause -> prPrec i 0 (concatD [prt 0 clause])
    Query terms -> prPrec i 0 (concatD [doc (showString "?-"), prt 0 terms])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "."), prt 0 xs])
instance Print Clause where
  prt i e = case e of
    Rule term terms -> prPrec i 0 (concatD [prt 0 term, doc (showString ":-"), prt 0 terms])
    UnitClause term -> prPrec i 0 (concatD [prt 0 term])

instance Print Term where
  prt i e = case e of
    OpNegate term -> prPrec i 9 (concatD [doc (showString "\\+"), prt 9 term])
    OpUnifies term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "="), prt 6 term2])
    OpNotUnifies term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "\\="), prt 6 term2])
    OpEqual term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "=="), prt 6 term2])
    OpNotEqual term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "\\=="), prt 6 term2])
    OpArIs term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "is"), prt 6 term2])
    OpArEqual term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "=:="), prt 6 term2])
    OpArNotEqual term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "=\\="), prt 6 term2])
    OpArLt term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "<"), prt 6 term2])
    OpArGt term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString ">"), prt 6 term2])
    OpArLte term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString "=<"), prt 6 term2])
    OpArGte term1 term2 -> prPrec i 7 (concatD [prt 6 term1, doc (showString ">="), prt 6 term2])
    OpArAdd term1 term2 -> prPrec i 5 (concatD [prt 5 term1, doc (showString "+"), prt 4 term2])
    OpArSub term1 term2 -> prPrec i 5 (concatD [prt 5 term1, doc (showString "-"), prt 4 term2])
    OpArMul term1 term2 -> prPrec i 4 (concatD [prt 4 term1, doc (showString "*"), prt 3 term2])
    OpArDiv term1 term2 -> prPrec i 4 (concatD [prt 4 term1, doc (showString "/"), prt 3 term2])
    OpArMod term1 term2 -> prPrec i 4 (concatD [prt 4 term1, doc (showString "mod"), prt 3 term2])
    OpArNeg term -> prPrec i 2 (concatD [doc (showString "-"), prt 2 term])
    Funct name terms -> prPrec i 0 (concatD [prt 0 name, doc (showString "("), prt 9 terms, doc (showString ")")])
    Var variable -> prPrec i 0 (concatD [prt 0 variable])
    Const constant -> prPrec i 0 (concatD [prt 0 constant])
    List lst -> prPrec i 0 (concatD [prt 0 lst])
  prtList 9 [x] = (concatD [prt 9 x])
  prtList 9 (x:xs) = (concatD [prt 9 x, doc (showString ","), prt 9 xs])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Lst where
  prt i e = case e of
    ListEmpty -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]")])
    ListNonEmpty listexpr -> prPrec i 0 (concatD [doc (showString "["), prt 0 listexpr, doc (showString "]")])
    ListChar str -> prPrec i 0 (concatD [prt 0 str])

instance Print ListExpr where
  prt i e = case e of
    LESingle term -> prPrec i 0 (concatD [prt 9 term])
    LESeq term listexpr -> prPrec i 0 (concatD [prt 9 term, doc (showString ","), prt 0 listexpr])
    LEHead term1 term2 -> prPrec i 0 (concatD [prt 9 term1, doc (showString "|"), prt 9 term2])

instance Print Constant where
  prt i e = case e of
    Number n -> prPrec i 0 (concatD [prt 0 n])
    Atom name -> prPrec i 0 (concatD [prt 0 name])


