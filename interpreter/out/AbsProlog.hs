

module AbsProlog where

-- Haskell module generated by the BNF converter




newtype Name = Name String deriving (Eq, Ord, Show, Read)
newtype Variable = Variable String deriving (Eq, Ord, Show, Read)
data Program = Program1 [Sentence]
  deriving (Eq, Ord, Show, Read)

data Sentence = SentenceClause Clause | Directive Term | Query Term
  deriving (Eq, Ord, Show, Read)

data Clause = Rule Term Term | UnitClause Term
  deriving (Eq, Ord, Show, Read)

data Term
    = OpSequence Term Term
    | OpNegate Term
    | OpUnifies Term Term
    | OpNotUnifies Term Term
    | OpEqual Term Term
    | OpNotEqual Term Term
    | OpArIs Term Term
    | OpArEqual Term Term
    | OpArNotEqual Term Term
    | OpArLt Term Term
    | OpArGt Term Term
    | OpArLte Term Term
    | OpArGte Term Term
    | OpArAdd Term Term
    | OpArSub Term Term
    | OpArMul Term Term
    | OpArDiv Term Term
    | OpArMod Term Term
    | OpArNeg Term
    | Funct Name [Term]
    | Var Variable
    | Const Constant
    | List Lst
  deriving (Eq, Ord, Show, Read)

data Lst = ListEmpty | ListNonEmpty ListExpr | ListChar String
  deriving (Eq, Ord, Show, Read)

data ListExpr
    = LESingle Term | LESeq Term ListExpr | LEHead Term Term
  deriving (Eq, Ord, Show, Read)

data Constant = Number Integer | Atom Name
  deriving (Eq, Ord, Show, Read)

