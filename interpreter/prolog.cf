-- file prolog.cf
-- Author: Tomasz Kępa <tk359746@students.mimuw.edu.pl>
-- LBNF of simplified prolog
-- Based on SICStus Prolog User’s Manual (release 4.3.5)
-- and BNFC documentation

entrypoints Program ;

rules Program ::= [Sentence] ;

terminator nonempty Sentence "." ;

rules Sentence ::= Clause | Directive | Query ;

rules Clause ::= Rule ;
rules Clause ::= Unit_clause ;

rules Rule ::= Head ":-" Body ;
rules Unit_clause ::= Head ;

rules Directive ::= ":-" Body ;
rules Query ::= "?-" Body ;
rules Head ::= Goal ;

rules Body ::= Body "->" Body ";" Body
             | Body "->" Body
             | "\\+" Body
             | Body "," Body
             | Goal ;

rules Goal ::= Term ;

_. Term   ::= Term12 ;
_. Term12 ::= Term11 ;
_. Term11 ::= Term10 ;
_. Term10 ::= Term9  ;
_. Term9  ::= Term8  ;
_. Term8  ::= Term7  ;
_. Term7  ::= Term6  ;
_. Term6  ::= Term5  ;
_. Term5  ::= Term4  ;
_. Term4  ::= Term3  ;
_. Term3  ::= Term2  ;
_. Term2  ::= Term1  ;
_. Term1  ::= Term0  ;

rules Term7 ::= Term6 "=" Term6
              | Term6 "\\=" Term6
              | Term6 "==" Term6
              | Term6 "\\==" Term6
              | Term6 "is" Term6
              | Term6 "=:=" Term6
              | Term6 "=\\=" Term6
              | Term6 "<" Term6
              | Term6 ">" Term6
              | Term6 "=<" Term6
              | Term6 ">=" Term6 ;

rules Term5 ::= Term5 "+" Term4
              | Term5 "-" Term4 ;

rules Term4 ::= Term4 "*" Term3
              | Term4 "/" Term3
              | Term4 "mod" Term3 ;

rules Term2 ::= "-" Term2 ;

rules Term0 ::= Functor "(" [Argument] ")"
             | "(" Term12 ")"
             | List
             | String
             | Constant
             | Variable ;

separator nonempty Argument "," ;

rules Argument ::= Term9 ;

rules List ::= "[" "]"
             | "[" List_Expr "]" ;

rules List_Expr ::= Term9
                  | Term9 "," List_Expr
                  | Term9 "|" Term9 ;

rules Constant ::= Atom
                 | Number ;

rules Number ::= Integer ;

rules Atom ::= Name ;

rules Functor ::= Name ;

rules Name ::= Word ;  -- TODO: add more options here

token Variable ('_' (letter | digit | '_')*)
             | (upper (letter | digit | '_')*) ;

token Word (lower (letter | digit | '_')*) ;

comment "/*" "*/" ;
comment "%" ;
